// Torsion TorqueScript IDE - Copyright (C) Sickhead Games, LLC
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.

// Generated by DialogBlocks (unregistered), 09/26/05 21:19:59

#if defined(__GNUG__) && !defined(__APPLE__)
#pragma implementation "BreakpointPropertyDlg.h"
#endif

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "BreakpointPropertyDlg.h"

#include "MainFrame.h"
#include "ProjectDoc.h"
#include "Breakpoint.h"

////@begin XPM images
////@end XPM images

/*!
 * BreakpointPropertyDlg type definition
 */

IMPLEMENT_DYNAMIC_CLASS( BreakpointPropertyDlg, wxDialog )

/*!
 * BreakpointPropertyDlg event table definition
 */

BEGIN_EVENT_TABLE( BreakpointPropertyDlg, wxDialog )

////@begin BreakpointPropertyDlg event table entries
    EVT_BUTTON( bpID_BROWSE, BreakpointPropertyDlg::OnBrowseClick )

    EVT_CHECKBOX( bpID_CONDITIONCHECK, BreakpointPropertyDlg::OnConditioncheckClick )

    EVT_CHECKBOX( bpID_PASSCHECK, BreakpointPropertyDlg::OnPasscheckClick )

    EVT_BUTTON( wxID_OK, BreakpointPropertyDlg::OnOkClick )

////@end BreakpointPropertyDlg event table entries

END_EVENT_TABLE()

/*!
 * BreakpointPropertyDlg constructors
 */

BreakpointPropertyDlg::BreakpointPropertyDlg( )
{
}


/*!
 * BreakpointPropertyDlg creator
 */

bool BreakpointPropertyDlg::Create( wxWindow* parent, Breakpoint* bp )
{
////@begin BreakpointPropertyDlg member initialisation
    m_File = NULL;
    m_Line = NULL;
    m_ConditionCheck = NULL;
    m_Condition = NULL;
    m_PassCheck = NULL;
    m_Pass = NULL;
////@end BreakpointPropertyDlg member initialisation
   m_Breakpoint = bp;
   wxASSERT( m_Breakpoint );

    SetExtraStyle(GetExtraStyle()|wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, 
       SYMBOL_BREAKPOINTPROPERTYDLG_IDNAME, 
       m_Breakpoint->GetFile().IsEmpty() ? "New Breakpoint" : SYMBOL_BREAKPOINTPROPERTYDLG_TITLE, 
       SYMBOL_BREAKPOINTPROPERTYDLG_POSITION,
       SYMBOL_BREAKPOINTPROPERTYDLG_SIZE, 
       SYMBOL_BREAKPOINTPROPERTYDLG_STYLE );

    CreateControls();
    GetSizer()->Fit(this);
    GetSizer()->SetSizeHints(this);
    Centre();

   // Set all the controls.
   m_File->Enable( false );
   m_File->SetLabel( m_Breakpoint->GetFile() );
   m_Line->SetValue( m_Breakpoint->GetLine() );
   
   if ( !m_Breakpoint->GetCondition().IsEmpty() ) {
      m_ConditionCheck->SetValue( true );
      m_Condition->Enable( true );
      m_Condition->SetLabel( m_Breakpoint->GetCondition() );
   }

   if ( m_Breakpoint->GetPass() > 0 ) {
      m_PassCheck->SetValue( true );
      m_Pass->Enable( true );
      m_Pass->SetValue( m_Breakpoint->GetPass() );
   }

   return TRUE;
}

/*!
 * Control creation for BreakpointPropertyDlg
 */

void BreakpointPropertyDlg::CreateControls()
{    
////@begin BreakpointPropertyDlg content construction
    BreakpointPropertyDlg* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxHORIZONTAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer2->Add(itemBoxSizer3, 0, wxALIGN_CENTER_VERTICAL|wxALL, 9);

    wxBoxSizer* itemBoxSizer4 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer3->Add(itemBoxSizer4, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 0);

    wxBoxSizer* itemBoxSizer5 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer4->Add(itemBoxSizer5, 0, wxGROW|wxBOTTOM, 5);

    wxStaticText* itemStaticText6 = new wxStaticText( itemDialog1, wxID_STATIC, _("&File:"), wxDefaultPosition, wxSize(30, -1), 0 );
    itemBoxSizer5->Add(itemStaticText6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    m_File = new wxTextCtrl( itemDialog1, wxID_ANY, _T(""), wxDefaultPosition, wxSize(275, -1), wxTE_READONLY );
    itemBoxSizer5->Add(m_File, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    wxButton* itemButton8 = new wxButton( itemDialog1, bpID_BROWSE, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT );
    itemBoxSizer5->Add(itemButton8, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 5);

    wxBoxSizer* itemBoxSizer9 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer4->Add(itemBoxSizer9, 0, wxGROW|wxBOTTOM, 5);

    wxStaticText* itemStaticText10 = new wxStaticText( itemDialog1, wxID_STATIC, _("&Line:"), wxDefaultPosition, wxSize(30, -1), 0 );
    itemBoxSizer9->Add(itemStaticText10, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT|wxTOP|wxBOTTOM, 0);

    m_Line = new wxSpinCtrl( itemDialog1, wxID_ANY, _T("0"), wxDefaultPosition, wxSize(75, -1), wxSP_ARROW_KEYS, 1, 2147483647, 0 );
    itemBoxSizer9->Add(m_Line, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    itemBoxSizer4->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 3);

    wxBoxSizer* itemBoxSizer13 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer4->Add(itemBoxSizer13, 0, wxGROW|wxBOTTOM, 5);

    m_ConditionCheck = new wxCheckBox( itemDialog1, bpID_CONDITIONCHECK, _("Break on true:"), wxDefaultPosition, wxSize(95, -1), wxCHK_2STATE );
    m_ConditionCheck->SetValue(false);
    itemBoxSizer13->Add(m_ConditionCheck, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    m_Condition = new wxTextCtrl( itemDialog1, wxID_ANY, _T(""), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer13->Add(m_Condition, 1, wxALIGN_CENTER_VERTICAL, 0);

    wxBoxSizer* itemBoxSizer16 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer4->Add(itemBoxSizer16, 0, wxGROW, 5);

    m_PassCheck = new wxCheckBox( itemDialog1, bpID_PASSCHECK, _("Break on pass:"), wxDefaultPosition, wxSize(95, -1), wxCHK_2STATE );
    m_PassCheck->SetValue(false);
    itemBoxSizer16->Add(m_PassCheck, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 0);

    m_Pass = new wxSpinCtrl( itemDialog1, wxID_ANY, _T("1"), wxDefaultPosition, wxSize(75, -1), wxSP_ARROW_KEYS, 1, 2147483647, 1 );
    itemBoxSizer16->Add(m_Pass, 0, wxALIGN_CENTER_VERTICAL, 0);

    itemBoxSizer3->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 3);

    wxBoxSizer* itemBoxSizer20 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer3->Add(itemBoxSizer20, 0, wxALIGN_RIGHT, 5);

    wxButton* itemButton21 = new wxButton( itemDialog1, wxID_OK, _("&OK"), wxDefaultPosition, wxDefaultSize, 0 );
    itemButton21->SetDefault();
    itemBoxSizer20->Add(itemButton21, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxTOP, 5);

    wxButton* itemButton22 = new wxButton( itemDialog1, wxID_CANCEL, _("&Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer20->Add(itemButton22, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxTOP, 5);

////@end BreakpointPropertyDlg content construction

   m_Condition->Enable( false );
   m_Pass->Enable( false );
}

/*!
 * Should we show tooltips?
 */

bool BreakpointPropertyDlg::ShowToolTips()
{
    return TRUE;
}

/*!
 * Get bitmap resources
 */

wxBitmap BreakpointPropertyDlg::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin BreakpointPropertyDlg bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end BreakpointPropertyDlg bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon BreakpointPropertyDlg::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin BreakpointPropertyDlg icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end BreakpointPropertyDlg icon retrieval
}




/*!
 * wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_CONDITIONCHECK
 */

void BreakpointPropertyDlg::OnConditioncheckClick( wxCommandEvent& event )
{
   m_Condition->Enable( event.IsChecked() );
}


/*!
 * wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_PASSCHECK
 */

void BreakpointPropertyDlg::OnPasscheckClick( wxCommandEvent& event )
{
   m_Pass->Enable( event.IsChecked() );
}


/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BROWSE
 */

void BreakpointPropertyDlg::OnBrowseClick( wxCommandEvent& event )
{
   wxASSERT( tsGetMainFrame() );
   wxDocManager* docMan = tsGetMainFrame()->GetDocumentManager();
   wxASSERT( docMan );
   wxDocTemplate* doctemp = docMan->FindTemplateForPath( "dummy.cs" );
   wxASSERT( doctemp );
   wxString fileFilter;
   fileFilter << doctemp->GetDescription()
      << wxT(" (") << doctemp->GetFileFilter() << wxT(") |")
      << doctemp->GetFileFilter();

   ProjectDoc* project = tsGetMainFrame()->GetProjectDoc();
   wxASSERT( project );
   wxFileName file( project->MakeAbsoluteTo( m_File->GetLabel() ) );


   wxFileDialog dlg( this, "Select A TorqueScript", file.GetPath(), file.GetFullName(), fileFilter, wxFD_OPEN | wxFD_FILE_MUST_EXIST );
   if ( dlg.ShowModal() == wxID_OK ) {

      m_File->SetLabel( project->MakeReleativeTo( dlg.GetPath() ) );
   }
}


/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_OK
 */

void BreakpointPropertyDlg::OnOkClick( wxCommandEvent& event )
{
   wxASSERT( m_Breakpoint );

   // Copy the new settings.
   Breakpoint newBp( *m_Breakpoint );
   newBp.SetFile( m_File->GetLabel() );
   newBp.SetLine( m_Line->GetValue() );
   
   if ( m_ConditionCheck->IsChecked() )
      newBp.SetCondition( m_Condition->GetLabel() );
   else
      newBp.SetCondition( wxEmptyString );

   if ( m_PassCheck->IsChecked() )
      newBp.SetPass( m_Pass->GetValue() );
   else
      newBp.SetPass( 0 );

   // Return cancel if we haven't changed.
   if ( *m_Breakpoint == newBp ) {

      EndModal( wxID_CANCEL );
      return;
   }

   *m_Breakpoint = newBp;
   //wxDialog::OnOK( event );
}


